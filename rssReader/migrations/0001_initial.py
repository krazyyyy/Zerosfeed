# Generated by Django 3.2.6 on 2021-12-06 14:52

import ckeditor.fields
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ADsCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('top_banner', models.TextField(blank=True, help_text='Scroll Top Banner', null=True)),
                ('bill_board', models.TextField(blank=True, help_text='Between Top and Biznis', null=True)),
                ('megaBillboard', models.TextField(blank=True, help_text='Between TEHNOLOGIJA and Sports', null=True)),
                ('category_one', models.TextField(blank=True, help_text='above Ostale Biznis Size : 728x90', null=True)),
                ('category_two', models.TextField(blank=True, help_text='above Ostale Sport Size : 728x90', null=True)),
                ('topSideAD', models.TextField(blank=True, help_text='Home Page Top Section Side News, Size: 300x250', null=True)),
                ('biznisSideAD', models.TextField(blank=True, help_text='Home Page Biznis Side News, Size: 300x250', null=True)),
                ('techSideAD', models.TextField(blank=True, help_text='Home Page Tech Side News, Size: 300x250', null=True)),
                ('vijestiSideBar', models.TextField(blank=True, help_text='Home Page Ostale Vijesti Side Bar, Size: 300x600', null=True)),
                ('sportSideBar', models.TextField(blank=True, help_text='Home Page Ostale Sport Side Bar, Size: 300x600', null=True)),
                ('category_sideAD', models.TextField(blank=True, help_text='Category Side AD, Size: 300x250', null=True)),
                ('source_sideAD', models.TextField(blank=True, help_text='Source Side AD, Size: 300x250', null=True)),
                ('sidebarAD', models.TextField(blank=True, help_text='Category & Source Page Side Bar, Size: 300x600', null=True)),
                ('access_name', models.CharField(default='admin', max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='Feed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('website_url', models.CharField(max_length=228)),
                ('source', models.CharField(blank=True, max_length=228, null=True)),
                ('category', models.CharField(blank=True, max_length=228, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='footerHTML',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_one', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('section_two', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('section_three', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('access_name', models.CharField(default='admin', max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=228)),
                ('link', models.CharField(max_length=228)),
                ('category', models.CharField(blank=True, max_length=228, null=True)),
                ('img', models.CharField(max_length=228)),
                ('pub_date', models.CharField(blank=True, max_length=228, null=True)),
                ('source', models.CharField(blank=True, max_length=228, null=True)),
                ('time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PRVINews',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=228)),
                ('category', models.CharField(blank=True, max_length=228, null=True)),
                ('img', models.CharField(max_length=228)),
                ('pub_date', models.CharField(blank=True, max_length=228, null=True)),
                ('source', models.CharField(blank=True, max_length=228, null=True)),
                ('news_context', ckeditor.fields.RichTextField()),
                ('time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
